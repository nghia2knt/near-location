// Code generated by MockGen. DO NOT EDIT.
// Source: userService.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	model "near-location/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// FindUserLocationsNearDatapoint mocks base method.
func (m *MockUserService) FindUserLocationsNearDatapoint(ctx context.Context, datapoint model.Datapoint, maxDistance, limit, skip int64) ([]model.UserLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserLocationsNearDatapoint", ctx, datapoint, maxDistance, limit, skip)
	ret0, _ := ret[0].([]model.UserLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserLocationsNearDatapoint indicates an expected call of FindUserLocationsNearDatapoint.
func (mr *MockUserServiceMockRecorder) FindUserLocationsNearDatapoint(ctx, datapoint, maxDistance, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserLocationsNearDatapoint", reflect.TypeOf((*MockUserService)(nil).FindUserLocationsNearDatapoint), ctx, datapoint, maxDistance, limit, skip)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindNearUserLocation mocks base method.
func (m *MockUserRepository) FindNearUserLocation(ctx context.Context, datapoint model.Datapoint, maxDistance, limit, skip int64) ([]model.UserLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearUserLocation", ctx, datapoint, maxDistance, limit, skip)
	ret0, _ := ret[0].([]model.UserLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearUserLocation indicates an expected call of FindNearUserLocation.
func (mr *MockUserRepositoryMockRecorder) FindNearUserLocation(ctx, datapoint, maxDistance, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearUserLocation", reflect.TypeOf((*MockUserRepository)(nil).FindNearUserLocation), ctx, datapoint, maxDistance, limit, skip)
}
